{"meta":{"title":"炳的知识库","subtitle":"","description":" 文章合集「上方可切换」其实没啥知识 😏，就分享一些奇奇怪怪的东西们 ","author":"wcbing/炳","url":"https://wcbing.top","root":"/"},"pages":[{"title":"所有分类","date":"2023-03-15T03:37:45.866Z","updated":"2023-02-19T06:17:42.953Z","comments":true,"path":"categories/index.html","permalink":"https://wcbing.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2023-04-28T04:25:30.240Z","updated":"2023-04-28T04:25:30.240Z","comments":true,"path":"friends/index.html","permalink":"https://wcbing.top/friends/index.html","excerpt":"","text":"欢迎与我交换友链，直接在下面评论就可以。提供网站名称、URL、头像链接等即可，如 title: 炳的知识库avatar: https://wcbing.top/imgs/my.pngurl: https://wcbing.top/"},{"title":"所有标签","date":"2023-02-19T06:17:58.411Z","updated":"2023-02-19T06:17:58.411Z","comments":true,"path":"tags/index.html","permalink":"https://wcbing.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"暂时换成hexo","slug":"misc/lut-blog","date":"2023-04-27T16:00:00.000Z","updated":"2023-05-01T07:25:37.458Z","comments":true,"path":"misc/lut-blog/","link":"","permalink":"https://wcbing.top/misc/lut-blog/","excerpt":"原来的没更新，丢在 buckup 了。","text":"原来的没更新，丢在 buckup 了。 学号：2016240135姓名：wcb 今天ylq问我怎么给博客加rss，顺便又给syh加上了（订阅源喜加二，🏇的，之前让加都不加）。丁哥举办的博客比赛，都参加了咱也不能缺席啊（虽然他很早就发了）。既然没什么内容，之前的统计和评论也没开，那咱就换个花哨点的主题，所以连夜换成Hexo。 cf倒是有最近统计，不过估计一多半是spider，感觉没意义。 其实之前的Hugo主题也还行，大分类写文档之类的很舒服，还有RSS、PWA，就是太素了。这个主题也很喜欢，但是不支持PWA，懒得修了。而且不太喜欢JS框架啊。","categories":[],"tags":[]},{"title":"计网应用层笔记","slug":"network/application","date":"2023-04-03T16:00:00.000Z","updated":"2023-05-01T07:41:16.014Z","comments":true,"path":"network/application/","link":"","permalink":"https://wcbing.top/network/application/","excerpt":"最近在看计网自顶向下，那就找点计网的面试题看看。先来应用层的，应用层主要考点就是HTTP了吧，还有就是HTTPS的SSL&#x2F;TLS。我争取尽快往里面填。","text":"最近在看计网自顶向下，那就找点计网的面试题看看。先来应用层的，应用层主要考点就是HTTP了吧，还有就是HTTPS的SSL&#x2F;TLS。我争取尽快往里面填。 还得有参赛证明？扔 https://wcbing.top/misc/lut-blog/ 可以吧。 HTTP 方法有哪些？客户端发送的 请求报文 第一行为请求行，包含了方法字段。 GET：获取资源，当前网络中绝大部分使用的都是 GET； HEAD：获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分； POST：传输实体主体 PUT：上传文件，由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。 PATCH：对资源进行部分修改。PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。 OPTIONS：查询指定的 URL 支持的方法； CONNECT：要求在与代理服务器通信时建立隧道。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。 TRACE：追踪路径。服务器会将通信路径返回给客户端。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。 Delete：删除文件,与 PUT 功能相反，并且同样不带验证机制。 HTTP 哪些常用的状态码及使用场景？当然是查一查我们亲爱的MDN啦：HTTP 响应状态码 - HTTP | MDN 状态码分类 (100–199) 信息响应，表示目前是协议的中间状态，还需要后续请求 (200–299) 成功响应 (300–399) 重定向消息 (400–499) 客户端错误响应 (500–599) 服务端错误响应 常用状态码 101 切换请求协议，从 HTTP 切换到 WebSocket 200 请求成功，有响应体 301 永久重定向：会缓存 类似的还有308 302 临时重定向：不会缓存 类似的还有307 304 协商缓存命中 400 请求错误 403 服务器禁止访问 404 资源未找到 500 服务器端错误 503 服务器繁忙 别的不说，重定向自己整个域名试试就明白了 2月份看到的梗图: 更多（梗图）：有哪些是程序员才懂的梗？然然然：HTTP状态码 HTTP1.0，1.1，2.0 的版本区别HTTP&#x2F;1.01996年5月，HTTP&#x2F;1.0 版本发布，为了提高系统的效率，HTTP&#x2F;1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。 HTTP&#x2F;1.0中浏览器与服务器只保持短暂的连接，连接无法复用。也就是说每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。 我们知道TCP连接的建立需要三次握手，是很耗费时间的一个过程。所以，HTTP&#x2F;1.0版本的性能比较差。 HTTP1.0 其实也可以强制开启长链接，例如接受Connection: keep-alive 这个字段，但是，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。 HTTP&#x2F;1.1为了解决HTTP&#x2F;1.0存在的缺陷，HTTP&#x2F;1.1于1999年诞生。相比较于HTTP&#x2F;1.0来说，最主要的改进就是引入了持久连接。所谓的持久连接即TCP连接默认不关闭，可以被多个请求复用。 客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。或者客户端在最后一个请求时，主动告诉服务端要关闭连接。 HTTP&#x2F;1.1版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。 有了持久连接和管道，大大的提升了HTTP的效率。但是服务端还是顺序执行的，效率还有提升的空间。 HTTP&#x2F;2HTTP&#x2F;2 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，主要基于 SPDY 协议。 HTTP&#x2F;2 为了解决HTTP&#x2F;1.1中仍然存在的效率问题，HTTP&#x2F;2 采用了多路复用。即在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应。能这样做有一个前提，就是HTTP&#x2F;2进行了二进制分帧，即 HTTP&#x2F;2 会将所有传输的信息分割为更小的消息和帧（frame）,并对它们采用二进制格式的编码。而这个负责拆分、组装请求和二进制帧的一层就叫做二进制分帧层。 除此之外，还有一些其他的优化，比如做Header压缩、服务端推送等。 Header压缩就是压缩对话。 服务端推送就是还没有收到浏览器的请求，服务器就把各种资源推送给浏览器（缓存）上。这样需要的时候就可以直接读取缓存了。 呃目前，主流的HTTP协议是HTTP&#x2F;2，部分为HTTP&#x2F;1.1。 这让我想起来之前知乎看到的一个回答 浏览器开两个窗口分别访问百度，各自窗口会单独创建tcp连接吗，还是复用之前的tcp？ - 紫云飞： ，里面提到百度的主站是现在为数不多的HTTP&#x2F;1.1了，看了看，确实。 POST和GET有哪些区别？各自应用场景？ 摘自帅地玩编程。知乎收藏夹翻出来的，计网面试题都总结好了，怎么办，不想写了😭。 使用场景GET 用于获取资源，而 POST 用于传输实体主体。 参数GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。 因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 中文 会转换为 %E4%B8%AD%E6%96%87，而空格会转换为 %20。POST 参数支持标准字符集。 1234GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1Copy to clipboardErrorCopiedPOST /test/demo_form.asp HTTP/1.1Host: w3schools.comname1=value1&amp;name2=value2Copy to clipboardErrorCopied 安全性安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。 GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。 安全的方法除了 GET 之外还有：HEAD、OPTIONS。 不安全的方法除了 POST 之外还有 PUT、DELETE。 幂等性幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。 所有的安全方法也都是幂等的。 在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。 GET &#x2F;pageX HTTP&#x2F;1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的： 1234GET /pageX HTTP/1.1GET /pageX HTTP/1.1GET /pageX HTTP/1.1GET /pageX HTTP/1.1Copy to clipboardErrorCopied POST &#x2F;add_row HTTP&#x2F;1.1 不是幂等的，如果调用多次，就会增加多行记录： 123POST /add_row HTTP/1.1 -&gt; Adds a 1nd rowPOST /add_row HTTP/1.1 -&gt; Adds a 2nd rowPOST /add_row HTTP/1.1 -&gt; Adds a 3rd rowCopy to clipboardErrorCopied DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1 是幂等的，即使不同的请求接收到的状态码不一样： 123DELETE /idX/delete HTTP/1.1 -&gt; Returns 200 if idX existsDELETE /idX/delete HTTP/1.1 -&gt; Returns 404 as it just got deletedDELETE /idX/delete HTTP/1.1 -&gt; Returns 404Copy to clipboardErrorCopied 可缓存如果要对响应进行缓存，需要满足以下条件： 请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。 响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。 响应报文的 Cache-Control 首部字段没有指定不进行缓存。 XMLHttpRequest 为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest： XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。 在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。 而 GET 方法 Header 和 Data 会一起发送。 😭前去看上面的链接吧，懒，不想动，人写的还好，先到这吧，有时间再补。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://wcbing.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://wcbing.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"面经","slug":"面经","permalink":"https://wcbing.top/tags/%E9%9D%A2%E7%BB%8F/"}]},{"title":"Termux的使用","slug":"dev/termux","date":"2023-03-12T16:00:00.000Z","updated":"2023-03-13T07:43:08.423Z","comments":true,"path":"dev/termux/","link":"","permalink":"https://wcbing.top/dev/termux/","excerpt":"手机搞搞 Linux？算了吧","text":"手机搞搞 Linux？算了吧 Termux 中文官网 Termux 是什么参见（BFSU）镜像站的帮助 Termux is a terminal emulator and Linux environment bringing powerful terminal access to Android.Termux 是运行在 Android 上的 terminal。不需要root，运行于内部存储（不在SD卡上）。 自带了一个包管理器，可以安装许多现代化的开发和系统维护工具。比如：neovim、tmux、zsh、clang、gcc、weechat、irssi、… 包管理器pkg实际是给apt又包了一层，感觉没啥必要，直接用apt就可以了。 安装及换源可以在F-droid或Github上下载最新版本。 安装后打开界面如下图。 输入termux-change-repo换源。整个过程可能需要换两次（第一次要下载一些工具，镜像源会刷新掉），按下图操作即可。 （第一次）换完源并更新之后，每次打开后提示多了一行，如下图： 容器（proot）内装Linux发行版推荐使用proot-distro对其管理，首先安装proot-distro： 1apt install proot-distro proot-distro list列出支持的发行版。 proot-distro install xxx进行安装。如我要安装 Ubuntu 就可以输入proot-distro install ubuntu。 proot-distro login xxx登陆进容器中。指定用户可以加上--user xxx，如proot-distro login --user root ubuntu 常用的Ubuntu 22.04的镜像大概20+MB，但是下载速度挺慢，最好科学上网。实在下不了可以去 Github&#x2F;Gitee 找找，有类似的走国内镜像项目，但是版本一般稍微老一点。 更多、详细用法见命令的帮助。 图形界面（X11）参见这篇文章，正好是这两天更新的。里面Termux的X11与proot内Linux发行版的X11都有写。 Termux X11：手機上的XWayland伺服器使用教學","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wcbing.top/tags/Linux/"}]},{"title":"Firefox下载","slug":"software/Browsers/Firefox","date":"2022-10-24T00:00:00.000Z","updated":"2023-04-28T04:57:55.010Z","comments":true,"path":"software/Browsers/Firefox/","link":"","permalink":"https://wcbing.top/software/Browsers/Firefox/","excerpt":"如题","text":"如题 Mozilla 宣言 &amp;&amp; Mozilla的使命：为所有人保持健康、开放且无障碍的互联网。Firefox：造反有理星星之火，正将燎原 前言Firefox是开源、自由软件，旨在保护隐私，由Mozilla开发，前身是世界上第一个浏览器。它和Edge（代替被墙的Chrome）是国内同步最方便的跨平台浏览器。 Firefox分为国际版（Mozilla运营）和国内版（北京谋智运营），两者数据不互通，请一定注意。 桌面端（Windows、Linux、Mac OS）直接去官网下载即可，手机端（Android、IOS）推荐的安装方式都是在应用商店下载，所以官网没有手机端下载链接。 国际版：https://firefox.com 国内版：https://firefox.com.cn 手机端（Android）Firefox for Android，代号fenix。 国际版国际版官方的下载渠道是Google Play 商店，但它被墙了。不过幸好，开发者也在其他地方上传了预编译的程序。 首先是以前最常用的Mozilla FTP服务器，但这个找起来稍微麻烦点：链接 FirefoxCI，FFUpdater上发现的，这个我试着最快：链接 Github，这个下载最慢，但是可以留着提Issues啊：链接 上面都是正式版的链接，beta、nightly等可以点进去找上级目录。 另外Firefox有很多第三方版本，比如： Iceraven一个第三方修改版，支持更多扩展。 Android版出于兼容性考虑，不能从网页安装扩展，只能依靠指定的扩展集，安装其中的扩展。官方扩展集内扩展较少，且正式版无法更换。而Beta&#x2F;Nightly或第三方的Iceraven（已内置一个比较丰富的）等可以自定义扩展集。 国内版国内应用商店都是国内版。 注：如果不嫌弃的话下载国内版也是能与国际版同步的，关闭设置内“本地服务”即可（如下图选项）","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"浏览器","slug":"浏览器","permalink":"https://wcbing.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"Windows分区","slug":"software/Windows分区","date":"2022-10-05T00:00:00.000Z","updated":"2023-04-28T04:52:10.487Z","comments":true,"path":"software/Windows分区/","link":"","permalink":"https://wcbing.top/software/Windows%E5%88%86%E5%8C%BA/","excerpt":"发发牢骚","text":"发发牢骚 很多人说软件装D盘、E盘，但是我见到很多听这些话的“小白”就是在“乱搞”，一个程序装另一个程序的文件夹里了，一个程序直接装D盘根目录了，这些都是挺常见的。其实还不如从根本上解决问题，把C盘搞大点然后直接装。 游戏或者几十G的大型专业软件除外。 把C盘分大一点！ 而且固态硬盘上的分区越少越好。建议两个盘，一个装系统和软件，一个装资料、文件；胆子大的可以直接当C盘战士。 可以在“开始”按钮处右键（或同时按Windows 和 x），选择【磁盘管理】，然后按这篇文章的【三、磁盘删除】和【四、扩展磁盘】进行删除与合并。文章是随便找的，内容可以我就懒得写了。需要提示的是，删除分区前记得备份！备份！ 把要删除的盘中的文件复制到别的盘中去。","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"Windows","slug":"Windows","permalink":"https://wcbing.top/tags/Windows/"}]},{"title":"Linux环境变量","slug":"dev/Linux-env","date":"2022-09-20T16:00:00.000Z","updated":"2022-09-21T13:43:02.020Z","comments":true,"path":"dev/Linux-env/","link":"","permalink":"https://wcbing.top/dev/Linux-env/","excerpt":"乱七八糟","text":"乱七八糟 查看 环境变量一般习惯为全大写，使用时前面加$ 可以使用echo查看，例如echo $PATH 查看所有环境变量：env或export Linux上多个环境变量用:分隔 临时环境变量临时声明变量：只在当前Shell进程中当前用户的环境中起作用，直接声明即可 1AB=/root 临时声明环境变量：使用export声明，只在当前Shell进程（及子进程）中起作用 1export AB=/root 两者都不可有空格。 长期环境变量可以修改Shell的初始化文件，将环境变量的声明语句（推荐，形式如上面的临时声明变量）或export 命令添加进去，每次启动Shell时就会自动加载环境变量。要注意不同Shell的初始化文件也不同，区别有时间自己看下面，先说结论。 如果**修改用户的环境变量，建议修改~/.xx-rc**（根据你使用的shell，一般是.bashrc）。修改完使用source ~/.xx-rc命令或启动新shell进程、切换用户等即可生效。 如果修改系统环境变量，建议在/etc/profile.d目录下新建或修改.sh结尾的脚本。修改完使用source /etc/profile命令或重新登录用户（注销、重启）以生效。 需要说的是，source命令也可以用.代替。它们只在当前shell进程起作用，所以最好还是重新登录或重开。 也可以修改/etc/environment，里面只能写变量的声明语句，然后使用source /etc/environment命令或注销、重启以生效。但是因为读取的优先级太高，添加的PATH总会被覆盖掉，所以用的不是很多。 Shell初始化文件Linux上有xx-profile和xx-rc两套Shell的初始化文件。其原因是登录 Linux Shell 有两种方法：login shell 与 non-login shell。 在开始介绍 bash 的配置文件前，我们一定要先知道的就是 login shell 与 non-login shell！ 重点在于有没有登入 (login) 啦！ login shell：取得 bash 时需要完整的登入流程的，就称为 login shell。举例来说，你要由 tty1 ~ tty6 登入，需要输入用户的账号与密码，此时取得的 bash 就称为『 login shell 』啰； non-login shell：取得 bash 接口的方法不需要重复登入的举动，举例来说，(1)你以 X window 登入 Linux 后，再以 X 的图形化接口启动终端机，此时那个终端接口并没有需要再次的输入账号与密码，那个 bash 的环境就称为 non-login shell 了。(2)你在原本的 bash 环境下再次下达 bash 这个指令，同样的也没有输入账号密码， 那第二个 bash (子程序) 也是 non-login shell 。为什么要介绍 login, non-login shell 呢？这是因为这两个取得 bash 的情况中，读取的配置文件数据并不一样所致。 通过su切换用户时，若直接 su 用户名，会以 non-login shell 登录到该用户，若加上选项 - 或是 -l 或是 --login，则会以 login shell 登录到该用户。 启动non-login shell会加载xx-rc；启动login shell时会加载xx-profile，而xx-profile一般会遍历同级别的xx-rc，也就间接加载了xx-rc。初始化时依次读取系统和用户的初始化文件，以最后读到的为准。以Bash为例，其初始化文件读取顺序： 部分Shell初始化文件如下表（其实大部分人都是只用默认的Bash）。 系统&#x2F;全局配置都在/etc/目录下 用户配置都在~目录下 bash（兼容sh） /ect/profile ~/.profile bash(non-login) /etc/bash.bashrc ~/.bashrc zsh 同sh以及/etc/zsh/zshprofile zsh(non-login) /etc/zsh/zshrc ~/.zshrc 以Debian系的bash为例，其他发行版可能不同，比如/etc/bash.bashrc换为/etc/bashrc 没有列出所有；各种xx-login与xx-profile作用类似","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wcbing.top/tags/Linux/"}]},{"title":"Git基础","slug":"dev/Git-base","date":"2022-09-14T00:00:00.000Z","updated":"2023-04-28T07:51:59.523Z","comments":true,"path":"dev/Git-base/","link":"","permalink":"https://wcbing.top/dev/Git-base/","excerpt":"一点点基础，应该够给你搭博客使用了","text":"一点点基础，应该够给你搭博客使用了 提前的设置git config在提交之前，你必须先设置你的名字和 email。这是你在提交 commit 时的签名，每次提交记录里都会包含这些信息。 12git config --global user.name &quot;YourName&quot;git config --global user.email &quot;YourEmail@xxx.com&quot; 本地操作git initGit初始化，在目标目录内执行 git status检测当前目录和暂存区的状态 git add将要同步的内容加入本地暂存区 git add 目录/文件 常用 12git add . ## 将当前目录下所有改动添加到暂存区git add -A ## 将仓库所有改动添加到暂存区 git commit提交到本地仓库中，后面加注释 12git commit -m &quot;注释&quot;git commit -am &quot;注释&quot; ## 相当于同时执行了 git add -A 远程仓库git clone克隆一个Git仓库到本地，就是直接下载。 git clone &lt;url&gt; git remote管理远程仓库，常用的是与远程仓库添加关联 1git remove add &lt;仓库别名&gt; &lt;仓库url&gt; 下面先不涉及分支，默认主分支master git push将本地仓库内容推送到远端仓库中 12git push &lt;仓库别名&gt; &lt;本地分支&gt;:&lt;远程分支&gt;git push &lt;仓库别名&gt; &lt;本地分支&gt; ## 分支相同可简写 -f：强制推送-u：同时建立分支的关联 git pull从远程仓库拉取到本地仓库，与git push相反 12git pull &lt;仓库别名&gt; &lt;远程分支&gt;:&lt;本地分支&gt;git pull &lt;仓库别名&gt; &lt;远程分支&gt; ## 分支相同可省略","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"开发速查","slug":"开发速查","permalink":"https://wcbing.top/tags/%E5%BC%80%E5%8F%91%E9%80%9F%E6%9F%A5/"}]},{"title":"「Code」汇编","slug":"vscode/lang/asm","date":"2022-09-13T16:00:00.000Z","updated":"2023-04-28T07:47:33.434Z","comments":true,"path":"vscode/lang/asm/","link":"","permalink":"https://wcbing.top/vscode/lang/asm/","excerpt":"汇编语言，准确来说是x86汇编","text":"汇编语言，准确来说是x86汇编 0. VS Code下文必看！ 下载安装VS Code、基本使用等等 「Code」开始 1. 环境及扩展Win10及以上以无内置DOS支持，需要安装DOS模拟器。不过你可以安装这个扩展，内置3个模拟器和一些开发工具MASM&#x2F;TASM: run MASM&#x2F;TASM assembly in DOSBox 汇编语言开发插件 选 TASM 可以使用 Turbo Debugger(TD) 调试，提供了TUI,看起来方便不少。 安装完后打开asm文件右键可以运行、调试。 2. 路径设置建议设置中打开如下选项，就不用手动挂载或在配置文件中指定目录了。前提是你使用VSCode时先打开一个文件夹（工作区）","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"lang","slug":"lang","permalink":"https://wcbing.top/tags/lang/"}]},{"title":"TG的一些东西","slug":"software/tg","date":"2022-08-05T00:00:00.000Z","updated":"2023-04-28T04:58:22.823Z","comments":true,"path":"software/tg/","link":"","permalink":"https://wcbing.top/software/tg/","excerpt":"来加我好友：炳","text":"来加我好友：炳 前提：注册、登录TG并设置为中文中文我频道里有，或者下载最后的第三方TG 设置用户名没有username的话部分机器人不能用，别人也没法@你 隐私和安全隐藏电话号码这个一定要隐藏啊 1）侧栏-设置2）设置-隐私和安全3）隐私-手机号码 两步验证还是这个页面，有个两步验证，开了更安全一点。 但我不喜欢开。 第三方TG（Android）因为TG开放了API，所以出现了一些好用的第三方客户端。 下面的自带一些代理（需登录时手动打开）和中文语言包 Nekogram（Neko，猫报） https://github.com/tehcneko/nekogram-files/releases 官网：https://nekogram.app/zh-hans/ 需要改语言包 Nekogram X（NekoX） https://github.com/NekoX-Dev/NekoX/releases 上架F-Droid 需要改翻译源 如图为 NekoX 的代理开关： 傻呗TG最近只让在官方的移动端注册。反正我频道里也发了语言包，不行就用官方版得了。","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"Docker基础操作","slug":"dev/Docker-base","date":"2022-06-22T00:00:00.000Z","updated":"2022-06-22T10:52:34.097Z","comments":true,"path":"dev/Docker-base/","link":"","permalink":"https://wcbing.top/dev/Docker-base/","excerpt":"Docker 镜像和容器的基础操作","text":"Docker 镜像和容器的基础操作 镜像管理查找镜像1docker search &lt;镜像关键字&gt; 下载镜像1docker pull &lt;镜像名&gt; 镜像名 &#x3D; 镜像仓库名:tag 查看镜像1docker image ls 列出的镜像ID是镜像短ID，镜像ID一般使用时最少仅需取开头3、4位，能分辨即可。 删除镜像123docker image rm &lt;镜像名&gt;/&lt;镜像 ID&gt;# 或docker rmi &lt;镜像名&gt;/&lt;完整镜像 ID&gt; 容器管理docker与docker container命令 操作时一般使用&lt;容器名&gt;或&lt;容器ID&gt;。容器名可通过--name在docker run时指定，也可由系统自动分配；容器ID同镜像ID一样，最少仅需开头3、4位，能分辨即可。 使用镜像创建一个新容器1docker run [参数] &lt;镜像名&gt; -d ：后台运行 -i ：进行交互式操作 -t ：分配一个伪终端，一般与i一同使用 --name xxx ：给新容器命名为“xxx” -p 3306:3306 ：指定端口映射，格式为“主机端口:容器端口” 样例： 12345docker run -d /--name mysql /-p 3306:3306 /-e MYSQL_ROOT_PASSWORD=123456 /mysql:5.7 docker run [...] mysql:5.7 ：使用“mysql:5.7”镜像创建容器 -d ：后台运行 --name mysql ：给新容器命名为“mysql” -p 3306:3306 ：指定端口映射，格式为：主机(宿主)端口:容器端口 -e MYSQL_ROOT_PASSWORD=123456 ：运行参数，设置mysql密码为“123456” 容器的查看与启停删 查看容器123docker container ls# 或docker ps -a ：查看所有容器 下面这几个 docker container 的常用命令可以省略container2. 启动容器 123docker container start &lt;容器名&gt;/&lt;容器ID&gt;# 或docker start &lt;容器名&gt;/&lt;容器ID&gt; 重启容器1docker restart &lt;容器名&gt;/&lt;容器ID&gt; 停止容器1docker stop &lt;容器名&gt;/&lt;容器ID&gt; 删除容器1docker rm &lt;容器名&gt;/&lt;容器ID&gt; 进入后台运行的容器1docker attach &lt;容器名&gt;/&lt;容器ID&gt; 1docker exec &lt;容器名&gt;/&lt;容器ID&gt; #推荐，退出容器不会停止 -it &lt;容器名&gt;/&lt;容器ID&gt; bash ：进入容器并启动终端（bash）进行交互式操作 退出容器1exit #容器内操作","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"开发速查","slug":"开发速查","permalink":"https://wcbing.top/tags/%E5%BC%80%E5%8F%91%E9%80%9F%E6%9F%A5/"}]},{"title":"「Code」代码片段","slug":"vscode/code-snippets","date":"2022-03-21T16:00:00.000Z","updated":"2023-04-28T07:47:21.870Z","comments":true,"path":"vscode/code-snippets/","link":"","permalink":"https://wcbing.top/vscode/code-snippets/","excerpt":"VS Code 代码片段","text":"VS Code 代码片段 点击这里进行管理 其语法为： 123456789101112131415&#123; &quot;名称&quot;: &#123; &quot;scope&quot;: &quot;适用的文件类型，省略则为全局或指定的类型&quot;, &quot;prefix&quot;: &quot;用来触发的前缀&quot;, &quot;body&quot;: [ // 你的代码，每行都要用双引号引起来，每行之间要加逗号。 // 断点用“$+数字”表示，有默认值的用“&#123;断点:默认值&#125;”表示，最后要停的地方是$0。 &quot;$&#123;1:fun&#125;()&quot;, &quot;&#123;&quot;, &quot; $2&quot;, &quot; return $0;&quot;, &quot;&#125;&quot; ] &#125;,&#125; 自用C&#x2F;C++代码片段新建一个全局的 ，适用于c，cpp12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&#123; &quot;c main body&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;cmain&quot;, &quot;body&quot;: [ &quot;#include &lt;stdio.h&gt;\\n&quot;, &quot;int main() &#123;\\n\\t$0\\n&#125;&quot; ], &#125;, &quot;long long int&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;LL&quot;, &quot;body&quot;: [ &quot;typedef long long LL;&quot; ], &#125;, &quot;define the max&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;MAX&quot;, &quot;body&quot;: [ &quot;#define MAX $0&quot; ], &#125;, &quot;n groups of data&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;ng&quot;, &quot;body&quot;: [ &quot;int $&#123;1:n&#125;;&quot;, &quot;scanf(\\&quot;%d\\&quot;, &amp;$&#123;1:n&#125;);&quot;, &quot;for (int $&#123;2:i&#125; = 0; $&#123;2:i&#125; &lt; $&#123;1:n&#125;; $&#123;2:i&#125;++) &#123;\\n\\t$0\\n&#125;&quot; ], &#125;, &quot;n groups of data--&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;n--&quot;, &quot;body&quot;: [ &quot;int $&#123;1:n&#125;;&quot;, &quot;scanf(\\&quot;%d\\&quot;, &amp;$&#123;1:n&#125;);&quot;, &quot;while ($&#123;1:n&#125;--) &#123;\\n\\t$0\\n&#125;&quot; ], &#125;, &quot;for i++&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;fori&quot;, &quot;body&quot;: [ &quot;for (int $&#123;1:i&#125; = $&#123;2:0&#125;; $&#123;1:i&#125; &lt; $&#123;3:size&#125;; $&#123;1:i&#125;++) &#123;\\n\\t$0\\n&#125;&quot; ] &#125;, &quot;for i--&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;for-&quot;, &quot;body&quot;: [ &quot;for (int $&#123;1:i&#125; = $&#123;2:size - 1&#125;; $&#123;1:i&#125; &gt;= 0; $&#123;1:i&#125;--) &#123;\\n\\t$0\\n&#125;&quot; ] &#125;, &quot;the end of format-print&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;end&quot;, &quot;body&quot;: [ &quot;\\&quot; \\\\n\\&quot;[i == $&#123;1:size&#125; - 1];$0&quot; ] &#125;, &quot;gcd&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;gcd&quot;, &quot;body&quot;: [ &quot;$&#123;1:LL&#125; gcd($&#123;1:LL&#125; m, $&#123;1:LL&#125; n) &#123;&quot;, &quot;\\twhile (n != 0) &#123;&quot;, &quot;\\t\\t$&#123;1:LL&#125; t = m % n;&quot;, &quot;\\t\\tm = n;&quot;, &quot;\\t\\tn = t;&quot;, &quot;\\t&#125;&quot;, &quot;\\treturn m;&quot;, &quot;&#125;&quot; ] &#125;, &quot;isPrime&quot;: &#123; &quot;scope&quot;: &quot;c,cpp&quot;, &quot;prefix&quot;: &quot;isPrime&quot;, &quot;body&quot;: [ &quot;int isPrime(int n) &#123;&quot;, &quot;\\tif (n == 1 || n == 0)&quot;, &quot;\\t\\treturn 0;&quot;, &quot;\\tfor (int i = 2; i &lt;= n / i; i++)&quot;, &quot;\\t\\tif (n % i == 0)&quot;, &quot;\\t\\t\\treturn 0;&quot;, &quot;\\treturn 1;&quot;, &quot;&#125;&quot; ] &#125;&#125; 这个是只适用于cpp的1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; &quot;cpp main body&quot;: &#123; &quot;prefix&quot;: &quot;cppmain&quot;, &quot;body&quot;: [ &quot;#include &lt;iostream&gt;&quot;, &quot;using namespace std;\\n&quot;, &quot;int main() &#123;&quot;, &quot;\\tios::sync_with_stdio(false);\\n\\tcin.tie(0);&quot;, &quot;\\t$0\\n\\treturn 0;\\n&#125;&quot; ], &#125;, &quot;vector&lt;int&gt;&quot;: &#123; &quot;prefix&quot;: &quot;vi&quot;, &quot;body&quot;: [ &quot;vector&lt;int&gt; &quot; ], &#125;, &quot;n groups of data (cpp)&quot;: &#123; &quot;prefix&quot;: &quot;ngc&quot;, &quot;body&quot;: [ &quot;int $&#123;1:n&#125;;&quot;, &quot;cin &gt;&gt; $&#123;1:n&#125;;&quot;, &quot;for (int $&#123;2:i&#125; = 0; $&#123;2:i&#125; &lt; $&#123;1:n&#125;; $&#123;2:i&#125;++) &#123;\\n\\t$0\\n&#125;&quot; ], &#125;, &quot;n groups of data--&quot;: &#123; &quot;prefix&quot;: &quot;n--&quot;, &quot;body&quot;: [ &quot;int $&#123;1:n&#125;;&quot;, &quot;cin &gt;&gt; $&#123;1:n&#125;;&quot;, &quot;while ($&#123;1:n&#125;--) &#123;\\n\\t$0\\n&#125;&quot; ], &#125;, &quot;LeetCode Lintcode&quot;: &#123; &quot;prefix&quot;: &quot;lcode&quot;, &quot;body&quot;: [ &quot;#include &lt;bits/stdc++.h&gt;\\nusing namespace std;\\n$0&quot;, &quot;int main() &#123;\\n\\tSolution a;\\n\\n\\treturn 0;\\n&#125;&quot; ] &#125;, &quot;code forces&quot;: &#123; &quot;prefix&quot;: &quot;cf&quot;, &quot;body&quot;: [ &quot;#include &lt;iostream&gt;&quot;, &quot;#include &lt;vector&gt;&quot;, &quot;using namespace std;\\n&quot;, &quot;void solution() &#123; &quot;, &quot;\\t$0\\n&#125;&quot;, &quot;int main() &#123;&quot;, &quot;\\tios::sync_with_stdio(false);\\n\\tcin.tie(0);&quot;, &quot;\\tint t;\\n\\tcin &gt;&gt; t;&quot;, &quot;\\twhile (t--) &#123;\\n\\t\\tsolution();\\n\\t&#125;&quot;, &quot;\\treturn 0;\\n&#125;&quot; ], &#125;,&#125;","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"c-cpp","slug":"c-cpp","permalink":"https://wcbing.top/tags/c-cpp/"}]},{"title":"Windows装机必备","slug":"software/win-base","date":"2022-02-08T16:00:00.000Z","updated":"2022-06-22T10:53:29.694Z","comments":true,"path":"software/win-base/","link":"","permalink":"https://wcbing.top/software/win-base/","excerpt":"","text":"","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"Windows","slug":"Windows","permalink":"https://wcbing.top/tags/Windows/"}]},{"title":"「Code」视频版-B站","slug":"vscode/bilibili","date":"2022-01-17T16:00:00.000Z","updated":"2023-04-28T07:47:54.567Z","comments":true,"path":"vscode/bilibili/","link":"","permalink":"https://wcbing.top/vscode/bilibili/","excerpt":"视频版，不过是在Linux上演示的","text":"视频版，不过是在Linux上演示的","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"}]},{"title":"JDK下载安装","slug":"dev/jdk","date":"2021-09-21T00:00:00.000Z","updated":"2023-04-28T04:28:10.304Z","comments":true,"path":"dev/jdk/","link":"","permalink":"https://wcbing.top/dev/jdk/","excerpt":"","text":"把官网和介绍放到了最后 1. Windows - 免手动配置环境变量推荐AdoptOpenJDK（Adoptium），它也是VS Code的默认推荐，开源免费。你可以在下面找到需要的版本进行下载。 Adoptium - 校园网联合镜像站任意点击一个镜像站的名字进入，以清华镜像站TUNA为例，依次点击“需要的版本（推荐8、11、17等LTS版本）”- “jdk” - “架构（x64）” - “平台（windows）”，如图就是64位Windows用的jdk11，选择第一个.msi文件下载打开即可。 Java I tell you（包含了多个版本的JDK）选择Temurin即可 安装时将下面第三个选项选上，装完重启（或关闭所有终端）即可。 微软加入了Adoptium，也有自己的Microsoft Build of OpenJDK，Java I tell you中也有下载。我看着安装程序和上面差不多，可以试试。 2. WSL或Linux可以直接用包管理器安装。终端内输入javac，如果提示没有安装，复制提示的命令来安装JDK。如上图，Ubuntu安装默认版本的OpenJDK（JDK11）的命令是 1sudo apt install default-jdk 安装完之后就可以正常使用了。 通过包管理器安装的软件不用配置PATH环境变量就能使用，但是有些程序会检测JAVA_HOME这个环境变量，这时需要设置一下。通过下面可以看到JDK在/usr/lib/jvm/java-xxx目录中，将其添加到环境变量中即可。 系统环境变量推荐放在/etc/profile.d目录下以.sh结尾的脚本中，下面例子就放在了my_env.sh中。根据实际情况修改单引号中的路径。 普通用户：sudo sh -c &quot;echo &#39;export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64&#39; &gt;&gt; /etc/profile.d/my_env.sh&quot;root用户：echo &#39;export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64&#39; &gt;&gt; /etc/profile.d/my_env.sh 系统环境注销再登录后即可生效。更多关于Linux环境变量的请看Linux环境变量。 3. 官网及版本 官网 介绍 Java SE(Oracle JDK) 包含Oracle JDK和JRE的下载，商业用途收费。 OpenJDK Java开源的源码。下面是预编译的OpenJDK。 Oracle OpenJDK 现在与Oracle JDK功能基本无区别，维护周期不同。 AdoptOpenJDK(现为Adoptium) AdoptOpenJDK是OpenJDK的社区维护版，现已移交eclipse基金会并更名为Adoptium。 …… 三个不同版本：(Sun&#x2F;Oracle) JDK、OpenJDK、Oracle OpenJDK 4. JDK、JRE、JVM的关系及区别 JDK(Java Development Kit)是Java开发工具包。 JRE(Java Runtime Enviroment)是Java的运行环境。 JVM(Java Virtual Machine)是Java虚拟机。 JDK里包含了JRE，JRE里又包含JVM。所以开发者只用安装JDK就行。具体关系如下：","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"java","slug":"java","permalink":"https://wcbing.top/tags/java/"}]},{"title":"「Code」SSH","slug":"vscode/remote/ssh","date":"2021-09-14T00:00:00.000Z","updated":"2023-04-28T07:48:08.107Z","comments":true,"path":"vscode/remote/ssh/","link":"","permalink":"https://wcbing.top/vscode/remote/ssh/","excerpt":"SSH","text":"SSH 开启SSH服务有些系统的ssh服务默认没有开启。在被远程的系统的终端中输入ssh，提示出错或没有安装，请先安装ssh服务器。 （如Ubuntu等Debian系） 1sudo apt install openssh-server 开启ssh服务开启ssh服务。 12sudo systemctl enable ssh #设置自启动sudo systemctl start ssh #启动服务 远程连接安装扩展安装该扩展：SSH：Remote - SSH 也可以直接安装这个远程开发的扩展包：Remote Development，包含WSL、SSH、Docker等。 安装后点击VSCode左下角绿色按钮，选择下图所示选项或者打开侧栏的“远程资源管理器”，在SSH Targets中点击添加 输入SSH登录命令 最简单的登录：ssh user@HostName，如ssh &#x72;&#111;&#111;&#x74;&#x40;&#x30;&#46;&#x30;&#46;&#48;&#46;&#x30;，不指定端口使用默认的22端口。 如果需要指定端口：ssh -p prot user@HostName，如ssh -p 8022 &#114;&#x6f;&#x6f;&#x74;&#x40;&#x30;&#46;&#48;&#46;&#x30;&#x2e;&#x30;。 确定后选择将刚刚的配置储存到哪里，一般选第一个就行。 点击如图“新窗口打开”或右下角的“Connect”，会打开一个新的窗口。 第一次连接可能需要你选择连接的是哪个平台。 随后输入密码，完成连接。 如何使用接下来可以打开 文件（夹） 终端 进行使用。 打开过的文件夹会在资源管理器中显示，可以方便以后快速打开。 免密登录（SSH通用）SSH认证方式有两种： 用户名密码认证 公钥私钥认证 上面就属于第一种用户名密码认证，如果不配置密钥的话每次连接都要输入密码进行验证。下面是第二种方式。 生成本地公钥本地终端中执行 1ssh-keygen 生成的文件就放在了~/.ssh目录中，图为Windows的样例。 ~是指当前用户的主目录，一般直接打开终端显示的目录就是。 添加到“已授权”文件中将本地用户~/.ssh/id_rsa.pub中的内容添加到被远程用户的~/.ssh/authorized_keys文件中，这个本地用户以后就可以免密登录了。 本地终端中执行：ssh-copy-id user@HostName如果要指定端口号的话：ssh-copy-id -p prot user@HostName（用法和ssh一样） 也可以在VS Code连接成功后点击“打开文件夹”，打开根目录\\或者当前用户主目录~，自己复制粘贴（没有已授权文件的话自己创建一下）。","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"}]},{"title":"「Code」WSL","slug":"vscode/remote/wsl","date":"2021-09-10T16:00:00.000Z","updated":"2023-04-28T07:49:02.558Z","comments":true,"path":"vscode/remote/wsl/","link":"","permalink":"https://wcbing.top/vscode/remote/wsl/","excerpt":"","text":"请点击知乎文章","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"Linux","slug":"Linux","permalink":"https://wcbing.top/tags/Linux/"}]},{"title":"「Code」Java SE","slug":"vscode/lang/java_se","date":"2021-08-20T16:00:00.000Z","updated":"2023-04-28T07:47:27.590Z","comments":true,"path":"vscode/lang/java_se/","link":"","permalink":"https://wcbing.top/vscode/lang/java_se/","excerpt":"Java SE","text":"Java SE 0. VS Code安装及使用下文必看！ 下载安装VS Code、基本使用等等 「Code」开始 1. JDK下载安装写过了，懒得复制了，请看 JDK介绍和下载 2. 开始使用用VS Code打开.java文件会自动提示安装Java插件包，或者自己直接搜索安装。安装完即可正常编写Java了。 新建一个Hello.java来写一个Java的Hello World试试 12345public class Hello&#123; //公共类名(这里是Hello)必须和你的文件名一样 public static void main(String[] args)&#123; System.out.println(&quot;Hello World!&quot;); &#125;&#125; 某个类的主方法可以点击上方的Run运行。如果整个个文件有多个类可以点击右上角的运行。 3. 新建项目安装完Java扩展包后，没打开文件夹时资源管理器中“打开的文件夹”会有一个如图“创建Java项目”的按钮（或者有一栏“Java Projects”，里面有个加号） 点击之后如果有相应的框架可以用相应的框架构建项目，如果没有选择第一个“No build tools”。选择一个文件夹打开，按照提示输入项目名称会生成一个项目模板，里面自带一个App.java（就是个Hello World），可以自己运行试试。 资源管理器左下方有一栏Java Projects，点开可以查看“项目视图”。在这里添加第三方包方便一点，不用手改json。","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"lang","slug":"lang","permalink":"https://wcbing.top/tags/lang/"},{"name":"java","slug":"java","permalink":"https://wcbing.top/tags/java/"}]},{"title":"「Code」Python","slug":"vscode/lang/python","date":"2021-08-20T16:00:00.000Z","updated":"2023-04-28T07:48:15.961Z","comments":true,"path":"vscode/lang/python/","link":"","permalink":"https://wcbing.top/vscode/lang/python/","excerpt":"","text":"请点击知乎文章","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"lang","slug":"lang","permalink":"https://wcbing.top/tags/lang/"},{"name":"python","slug":"python","permalink":"https://wcbing.top/tags/python/"}]},{"title":"镜像合集","slug":"nav/mirrors","date":"2021-08-13T16:00:00.000Z","updated":"2022-06-22T10:56:52.423Z","comments":true,"path":"nav/mirrors/","link":"","permalink":"https://wcbing.top/nav/mirrors/","excerpt":"国内常用镜像站合集","text":"国内常用镜像站合集","categories":[{"name":"导航","slug":"导航","permalink":"https://wcbing.top/categories/%E5%AF%BC%E8%88%AA/"}],"tags":[{"name":"镜像","slug":"镜像","permalink":"https://wcbing.top/tags/%E9%95%9C%E5%83%8F/"}]},{"title":"pip的使用","slug":"dev/pip","date":"2021-07-04T16:00:00.000Z","updated":"2023-01-10T07:43:09.040Z","comments":true,"path":"dev/pip/","link":"","permalink":"https://wcbing.top/dev/pip/","excerpt":"","text":"pip是python的包管理器，有能力可以自己参考官方使用文档。 有时候你会见到python -m pip xxx，其实就相当于pip xxx 1 安装、卸载、升级 pip安装库的命令是：pip install 库名称 pip升级库的命令是：pip install --upgrade 库名称 或者pip install -U 库名称由此可知，升级是特殊的安装操作。此外，pip可以升级自身。 pip卸载库的命令是：pip uninstall 库名称 2 展示与查看到底安装了那些库呢，又怎么查看某个库的具体信息呢？ pip list 可展示所有已安装的库 pip show 库名称 可查看某库的具体信息 pip search 关键字 可搜素并展示相关库 3 pip换源（建议）由于国内网络原因，很多python库在线安装很慢甚至安装失败。 建议自己手动换源下载，可以将某个镜像源设置为pip默认源。这里以阿里云的为例，终端里输入： 1pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 国内常用pip源（pypi）： pypi - 校园网联合镜像站：https://mirrors.cernet.edu.cn/list/pypi集合了不少高校的源和使用帮助 阿里云镜像：http://mirrors.aliyun.com/pypi/simple/能用，但速度一般 豆瓣镜像：http://pypi.doubanio.com/simple/ 更多镜像站及其使用请查看下文如何使用镜像站-下载及“换源” 4特殊安装（非必须）指定版本安装pip install 第三方库名称==版本号指定版本的几种方式：①不指定的情况下，默认安装最新的②&#x3D;&#x3D; 指定具体版本号③&lt;&#x3D; 指定最高版本号④&gt;&#x3D; 指定最低版本号⑤&lt; 不高于某版本号⑥&gt; 不低于某版本号注意，如果不指定具体的版本号，则需要用引号(‘ ‘)。如：pip install &#39;jieba&gt;0.42&#39; 离线安装有时候我们可能在无网络或者网速很慢的情况下安装某个库，这个时候就会想到离线安装，可以去下面这些网站提前下载所需库。 某大学：https://www.lfd.uci.edu/~gohlke&#x2F;pythonlibs&#x2F;Pypi（Python官方）：https://pypi.org/ 把第三库的文件下载到本地后，输入pip install 下载的文件的路径即可","categories":[{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"}],"tags":[{"name":"开发速查","slug":"开发速查","permalink":"https://wcbing.top/tags/%E5%BC%80%E5%8F%91%E9%80%9F%E6%9F%A5/"},{"name":"pip","slug":"pip","permalink":"https://wcbing.top/tags/pip/"}]},{"title":"「Code」C/CPP","slug":"vscode/lang/c-cpp","date":"2021-06-20T16:00:00.000Z","updated":"2023-04-29T18:41:53.365Z","comments":true,"path":"vscode/lang/c-cpp/","link":"","permalink":"https://wcbing.top/vscode/lang/c-cpp/","excerpt":"","text":"请点击知乎文章","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"c-cpp","slug":"c-cpp","permalink":"https://wcbing.top/tags/c-cpp/"},{"name":"lang","slug":"lang","permalink":"https://wcbing.top/tags/lang/"}]},{"title":"「Code」目录","slug":"vscode/start","date":"2021-06-20T16:00:00.000Z","updated":"2023-04-29T18:41:53.363Z","comments":true,"path":"vscode/start/","link":"","permalink":"https://wcbing.top/vscode/start/","excerpt":"文字版教材的目录","text":"文字版教材的目录 目录目录 没办法，因为有些文章在知乎上，这个先跳到知乎 或者知乎专栏","categories":[{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"}]},{"title":"浏览器扩展与用户脚本","slug":"software/Browsers/Ext-US","date":"2021-05-21T00:00:00.000Z","updated":"2023-04-28T05:03:45.710Z","comments":true,"path":"software/Browsers/Ext-US/","link":"","permalink":"https://wcbing.top/software/Browsers/Ext-US/","excerpt":"浏览器扩展与用户脚本的介绍和推荐","text":"浏览器扩展与用户脚本的介绍和推荐 浏览器扩展我觉得这个就不用介绍了吧。不过提一下，这叫扩展，不叫插件。浏览器插件是另外的东西。 某些扩展翻译 腾讯翻译：火狐 Chromuim系也有Google关停翻译情况下为数不多的支持网页翻译的。 FireFox增强扩展 去广告因为(SB)优酷把北京谋智告了，要求下架所有去广告扩展，所以中国区下架了。可以去Github下载。 uBlock Origin - Github（Firefox选不带Lite的） Adguard - Github 北京谋智出品增强扩展，国内版自带。 标签页优化 - 火狐社区作用：双击关团当前标签页；紧临当前标签页打开新标签页；在新标签页中打开书签、搜索结果…… 附加组件管理器 - 火狐社区作用：拖拽手势；地址栏二维码；自动清除三个月以前的历史记录；恢复关闭的标签页快捷按钮 手机上支持扩展的浏览器 Firfox系请看左边《Firefox下载》，不再重复。最好自建扩展集。 Chromium系可以配合下方离线扩展商店使用 狐猴浏览器国内开发，能方便地从 Edge 的扩展商店安装扩展，可以试试。 Kiwi Browser Yandex Browser俄罗斯搜索引擎出品，印象中没简中翻译，而且比较卡。反正先用上面的吧。 Chromuim系离线扩展商店 极简插件_Chrome扩展插件商店_优质crx应用 Chrome插件,谷歌浏览器插件下载-扩展迷 用户脚本（UserScript）脚本及脚本管理器脚本管理器是一种浏览器扩展，用来允许用户在网页中加载特定的（自定义的）程序代码，那些加载的代码就是用户脚本（UserScript）。更具体的说脚本其实就是JS（JavaScript）代码。 用户脚本平时大多简称脚本，又叫浏览器脚本。还有人叫油猴脚本，因为油猴是第一个脚本管理器（TamperMonkey是篡改猴，不是油猴，麻烦浪费2秒翻译一下）。同上，脚本，不叫插件。 因为有时候需要手机上浏览也需要一些脚本来优化阅读，所以我用的浏览器有个要求就是能装脚本。而套壳浏览器如Via、X等，虽然声称支持油猴函数等，但还是有些脚本不能被支持，如 GitHub 中文化插件 。所以最近两年转向了支持扩展的Firefox。 脚本托管网站Greasy Fork - 安全、实用的用户脚本大全用户脚本列表 - 脚本猫 手机专用脚本 via轻插件 玩浏览器","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"浏览器","slug":"浏览器","permalink":"https://wcbing.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"浏览器内核及UA","slug":"software/Browsers/Kernel-UA","date":"2021-05-21T00:00:00.000Z","updated":"2023-04-28T05:04:15.177Z","comments":true,"path":"software/Browsers/Kernel-UA/","link":"","permalink":"https://wcbing.top/software/Browsers/Kernel-UA/","excerpt":"给你看看什么叫浏览器内核以及UA","text":"给你看看什么叫浏览器内核以及UA 浏览器内核介绍 浏览器内核分为两部分：渲染引擎和JS引擎。由于JS引擎越来越独立，内核就倾向于只指渲染引擎。 浏览器大战 - 奔跑中的奶酪 人类早期网上冲浪珍贵资料：第一次浏览器大战 - 奔跑中的奶酪 人类早期网上冲浪珍贵资料：第二次浏览器大战 - 奔跑中的奶酪 【果核视频】浏览器内核发展编年史 看图可能更清楚（图源老殁，有一些小错误） UA（UserAgent）介绍及检测 互联网的“套娃行为”有多凶残? - 奔跑中的奶酪 在任意界面按下F12打开开发者模式，切换到终端，输入 1alert(navigator.userAgent) 即可查看浏览器UA。 在线检测： 在线浏览器检测_ip33.com 浏览器内核检测工具 Browser kernel v2.1 …… 太多啦","categories":[{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"浏览器","slug":"浏览器","permalink":"https://wcbing.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"CS收藏夹","slug":"nav/cs","date":"2021-03-10T16:00:00.000Z","updated":"2023-04-20T06:59:19.510Z","comments":true,"path":"nav/cs/","link":"","permalink":"https://wcbing.top/nav/cs/","excerpt":"看内容，别看我。","text":"看内容，别看我。 常用社区、搜索 百度开发者搜索集合了国内博客和Github F 搜- GitHub- Gitee呃，合法开源？ 知乎- Stack Overflow程序员问答社区 CSDN鱼龙混杂 镜像合集 开源软件 &#x2F; Linux 镜像 开发类 镜像 在线开发工具 Cloud Studio腾讯云WebIDE DevStudio阿里云WebIDE GDB online Debugger在线GDB Compiler Explorer转汇编 代码可视化 菜鸟工具 在线工具 孟坤工具箱 PrivateBin文本&#x2F;代码分享 PrivateBinF搜镜像 在线格式化- 通用学习资源导航类 CS培养计划网易的 CS自学指南国外CS课程为主 Road 2 Coding- TeachYourselfCS-CN- 视频类 哔哩哔哩 中国大学MOOC 网易云课堂 腾讯课堂 文本、交互类 菜鸟教程- 蓝桥云课有实操 菜鸟教程模仿第一个？ Microsoft Learn巨硬的教程不用说吧 廖雪峰的网站- 书籍、文档类 书-阿里云盘- 书-天翼云盘- Doocs技术类书籍推荐？ Google Style Guides代码风格 DevDocs文档合集，支持PWA 算法、竞赛相关数据结构与算法学习 OI Wiki 数据结构和算法可视化 必须掌握哪些算法？ - 知乎 OJ题库及题解 PTA比较简单 牛客竞赛- 牛客题库（OJ）看OJ和专项 洛谷从小白到，呃，老白？ 信奥题库OI？看看 力扣 LeetCode新手勿入 LintCode 炼码- CodeTop企业题库- Codeforces英文俄站，访问慢 LeetCode题解Doocs 参考答案查询九章算法 更多请看下方语言分类 竞赛认证 CCF 相关- C4-中国高校计算机大赛包括天梯赛等 蓝桥杯- 软考- 计算机等级考试你学计算机的还考这？ 分类学习导论&#x2F;入门科普 【计算机科学速成课】- 中字入门科普，推荐 C&#x2F;C++ cppreference官方中文C&#x2F;C++参考手册 Java Java 官网Oracle官网 JDK下载安装- Java SE DocsOracle的Java SE &amp; JDK文档 JDK11 中文API菜鸟工具 JDK8 中文API- How2J 的 Java教程- Python Python 官网 Python官方文档 Python Cookbook Go Go 官网 Go语言圣经（中文版） LeetCode Cookbook CTF CTF Wiki 云演 攻防世界 前端 W3C官方- MDN - MozillaWeb学习和API文档 w3school- Vue.js- 前端导航- 工具学习合集 计算机教育中缺失的一课Shell、Vim、Git… Linux Linux工具快速教程 鸟哥Linux命令大全 Linux命令大全 Linux就该这么学官网在线电子书 The Linux Command Line中英对照版电子书 Git 版本控制(Git)- Git - BookGit官网电子书 Learn Git Branching游戏的方式学Git分支 正则表达式 regex101- RegExr（中文）RegExr镜像 RegExr（F搜）RegExr镜像 Docker &#x2F; K8S Docker Documentation官方文档，纯英 Docker从入门到实践- 从Docker到Kubernetes进阶在线电子书 其他 大数据导航 程序员容易发音错误的单词","categories":[{"name":"导航","slug":"导航","permalink":"https://wcbing.top/categories/%E5%AF%BC%E8%88%AA/"}],"tags":[]},{"title":"工具收藏夹","slug":"nav/tools","date":"2021-03-10T16:00:00.000Z","updated":"2023-04-20T06:59:41.730Z","comments":true,"path":"nav/tools/","link":"","permalink":"https://wcbing.top/nav/tools/","excerpt":"看内容，别看我。","text":"看内容，别看我。 软件获取PC软件 联想应用商店（Win）国内最好的？ Windows装机必备- 一些Windows软件小工具、开发 阿酷杂货铺 果核剥壳 殁漂遥 在线工具作图 Draw.io流程图，强烈推荐 Draw.ioF搜的镜像 Draw.io 教学- Draw.io画E-R图还支持SQL导入 思维导图- ProcessOn国内，收费 文本编辑 Markdown 教程国内中文教程 LaTeX公式帮助文档 在线LaTeX公式编辑器- 硬件信息 CPU天梯图 显卡天梯图 手机CPU天梯图 极客湾移动芯片排行 产品库 学术 Wiki百科镜像 思谋学术导航谷歌学术镜像、Sci-Hub 晨曦数字图书馆低调使用 ZLib Pro助手镜像检测 life镜像站已寄，有教程 shop镜像站 提问的指挥简中翻译 提问的指挥中文镜像","categories":[{"name":"导航","slug":"导航","permalink":"https://wcbing.top/categories/%E5%AF%BC%E8%88%AA/"}],"tags":[]}],"categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://wcbing.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"开发类","slug":"开发类","permalink":"https://wcbing.top/categories/%E5%BC%80%E5%8F%91%E7%B1%BB/"},{"name":"软件类","slug":"软件类","permalink":"https://wcbing.top/categories/%E8%BD%AF%E4%BB%B6%E7%B1%BB/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://wcbing.top/categories/VS-Code/"},{"name":"导航","slug":"导航","permalink":"https://wcbing.top/categories/%E5%AF%BC%E8%88%AA/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://wcbing.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"面经","slug":"面经","permalink":"https://wcbing.top/tags/%E9%9D%A2%E7%BB%8F/"},{"name":"Linux","slug":"Linux","permalink":"https://wcbing.top/tags/Linux/"},{"name":"软件","slug":"软件","permalink":"https://wcbing.top/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"浏览器","slug":"浏览器","permalink":"https://wcbing.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"Windows","slug":"Windows","permalink":"https://wcbing.top/tags/Windows/"},{"name":"开发速查","slug":"开发速查","permalink":"https://wcbing.top/tags/%E5%BC%80%E5%8F%91%E9%80%9F%E6%9F%A5/"},{"name":"vscode","slug":"vscode","permalink":"https://wcbing.top/tags/vscode/"},{"name":"lang","slug":"lang","permalink":"https://wcbing.top/tags/lang/"},{"name":"c-cpp","slug":"c-cpp","permalink":"https://wcbing.top/tags/c-cpp/"},{"name":"java","slug":"java","permalink":"https://wcbing.top/tags/java/"},{"name":"python","slug":"python","permalink":"https://wcbing.top/tags/python/"},{"name":"镜像","slug":"镜像","permalink":"https://wcbing.top/tags/%E9%95%9C%E5%83%8F/"},{"name":"pip","slug":"pip","permalink":"https://wcbing.top/tags/pip/"}]}